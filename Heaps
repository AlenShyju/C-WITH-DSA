Program to implement the concept of heaps
max heap


#include <iostream>
#include <vector>

class MaxHeap {
private:
    std::vector<int> heapArray;

    // Helper function to maintain heap property
    void heapify(int i) {
        int size = heapArray.size();
        int largest = i;
        int left = 2 * i + 1;
        int right = 2 * i + 2;

        if (left < size && heapArray[left] > heapArray[largest])
            largest = left;

        if (right < size && heapArray[right] > heapArray[largest])
            largest = right;

        if (largest != i) {
            std::swap(heapArray[i], heapArray[largest]);
            heapify(largest);
        }
    }

public:
    // Constructor to initialize an empty heap
    MaxHeap() {}

    // Insert an element into the heap
    void insert(int value) {
        heapArray.push_back(value);
        int i = heapArray.size() - 1;

        while (i > 0 && heapArray[i] > heapArray[(i - 1) / 2]) {
            std::swap(heapArray[i], heapArray[(i - 1) / 2]);
            i = (i - 1) / 2;
        }
    }

    // Remove the maximum element from the heap
    void remove() {
        if (heapArray.empty()) {
            std::cout << "Heap is empty." << std::endl;
            return;
        }

        std::swap(heapArray[0], heapArray.back());
        heapArray.pop_back();
        heapify(0);
    }

    // Peek (find maximum element without removing)
    int peek() {
        if (heapArray.empty()) {
            std::cout << "Heap is empty." << std::endl;
            return -1; // Return a sentinel value
        }
        return heapArray[0];
    }

    // Print the heap
    void print() {
        for (int value : heapArray)
            std::cout << value << " ";
        std::cout << std::endl;
    }
};

int main() {
    MaxHeap heap;
    heap.insert(10);
    heap.insert(20);
    heap.insert(5);
    heap.insert(15);

    std::cout << "Max heap: ";
    heap.print();

    std::cout << "Max element: " << heap.peek() << std::endl;

    heap.remove();
    std::cout << "After removing max element: ";
    heap.print();

    return 0;
}

